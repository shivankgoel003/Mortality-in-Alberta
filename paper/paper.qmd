---
title: "Respiration Related Death Cause show Signficant Relation to Increasing "
subtitle: "My subtitle if needed"
author: 
  - Vanshika Vanshika
  - Shivank Goel
  - Navya Hooda
thanks: "Code and data are available at: https://github.com/shivankgoel003/Mortality-in-Alberta."
date: today
date-format: long
abstract: "First sentence. Second sentence. Third sentence. Fourth sentence."
format: pdf
number-sections: true
bibliography: references.bib
---

```{r}
#| include: false
#| warning: false
#| message: false

library(tidyverse)
library(palmerpenguins)
library(readxl)
library(here)

deaths_data <- read.csv(here("data/analysis_data/cleaned_file.csv"))
air_quality_data <- read.csv(here("data/analysis_data/cleaned_air_data.csv"))
data <- read.csv(here("data/analysis_data/cleaned_chart_data.csv"))
data_peak <- read.csv(here("data/analysis_data/cleaned_peak_data.csv"))
data_lung <- read.csv(here("data/analysis_data/merged_data.csv"))
data_heart <- read.csv(here("data/analysis_data/merged_heart_data.csv"))
```


# Introduction

You can and should cross-reference sections and sub-sections. We use @citeR and @rohan.

The remainder of this paper is structured as follows. @sec-data....



# Data {#sec-data}

Some of our data is of penguins (@fig-bills), from @palmerpenguins.

```{r}
#| label: fig-bills
#| fig-cap: Bills of penguins
#| echo: false

# Plot the regression graph
ggplot(data, aes(x = provincial_average, y = total_deaths)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +  # Add linear regression line without confidence interval
  labs(x = "Provincial Average", y = "Total Deaths", title = "Regression Graph") +
  theme_minimal()


``` 

```{r}
#| label: fig-bills
#| fig-cap: Bills of penguins
#| echo: false

# Plot the regression graph for all lungs causes
ggplot(data_lung, aes(x = provincial_average, y = total_deaths)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +  # Add linear regression line without confidence interval
  labs(x = "Provincial Average", y = "Total Deaths", title = "Regression Lung") +
  theme_minimal()
```

```{r}
#| label: fig-bills
#| fig-cap: Bills of penguins
#| echo: false
# Plot the regression graph for all heart causes
ggplot(data, aes(x = provincial_average, y = total_deaths)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +  # Add linear regression line without confidence interval
  labs(x = "Provincial Average", y = "Total Deaths", title = "Regression Heart") +
  theme_minimal()


```

Talk more about it.

And also planes (@fig-planes). (You can change the height and width, but don't worry about doing that until you have finished every other aspect of the paper - Quarto will try to make it look nice and the defaults usually work well once you have enough text.)

```{r}
#| label: fig-planes
#| fig-cap: Relationship between wing length and width
#| echo: false
#| warning: false
#| message: false

# Assuming your data frame is named 'cleaned_avg_PM25_conc' and is already filtered and renamed.
# Convert factors to character to avoid issues in ggplot
data[] <- lapply(data, function(x) if(is.factor(x)) as.character(x) else x)
# Creating the plot with ggplot
p <- ggplot(data, aes(x = year)) +
  geom_line(aes(y = provincial_average, colour = "Provincial Average")) +
  geom_line(aes(y = x10th_percentile, colour = "10th Percentile")) +
  geom_line(aes(y = x90th_percentile, colour = "90th Percentile")) +
  labs(title = "Annual Trends of PM2.5 Concentrations in Alberta: Provincial Averages and Percentile Ranges (2012-2021)",
       x = "Years", y = "PM2.5 Concentration (μg/m³)") +
  scale_colour_manual(values = c("Provincial Average" = "blue", "10th Percentile" = "green", "90th Percentile" = "red")) +
  theme_minimal()

# Display the plot
p





library(MASS)

air_quality_data <- air_quality_data[air_quality_data$air_quality_health_index != "10+",]
air_quality_data$air_quality_health_index <- as.numeric(air_quality_data$air_quality_health_index)

# Calculate the average Air Quality Health Index per year
average_aqi_by_year <- air_quality_data %>%
  group_by(year) %>%
  summarize(average_aqi = mean(air_quality_health_index))

combined_data <- merge(deaths_data, average_aqi_by_year, by = "year")

# Plot scatter plot of mortality rates vs. air quality health index
ggplot(combined_data, aes(x = average_aqi, y = total_deaths)) +
  geom_point() +
  geom_smooth(method = "lm") +
  facet_wrap(~cause) +
  labs(title = "Scatter Plot of Mortality Rates vs. Air Quality Health Index",
       x = "Average Air Quality Health Index",
       y = "Total Deaths")

# Fit the model
model <- glm.nb(total_deaths ~ average_aqi + factor(year) + factor(cause), data = combined_data)

# Model Diagnostics
par(mfrow=c(2,2))
plot(model)

# Add Predictions to the combined data
# Note: predict() function might throw an error if there are new factor levels in the test set that were not present in the training set
# To prevent this, the newdata argument should only include levels that were present in the model fitting
combined_data$predicted_deaths <- predict(model, newdata = combined_data, type = "response")

# Plot Observed vs. Predicted Deaths
ggplot(combined_data, aes(x = total_deaths, y = predicted_deaths)) +
  geom_point() +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
  labs(x = "Observed Deaths", y = "Predicted Deaths") +
  theme_minimal()

# Effect of AQHI on Predicted Deaths
ggplot(combined_data, aes(x = average_aqi, y = predicted_deaths, color = factor(year))) +
  geom_point() +
  geom_line(aes(group = factor(year))) + # Adding lines to connect points by year
  labs(x = "Average Air Quality Health Index", y = "Predicted Deaths") +
  theme_minimal() +
  facet_wrap(~cause)




# Merge datasets on 'year'
combined_data <- merge(deaths_data, average_aqi_by_year, by = "year")

# Plot scatter plot of mortality rates vs. air quality health index
ggplot(combined_data, aes(x = average_aqi, y = total_deaths)) +
  geom_point() +
  geom_smooth(method = "lm") +
  facet_wrap(~cause) +
  labs(title = "Scatter Plot of Mortality Rates vs. Air Quality Health Index",
       x = "Average Air Quality Health Index",
       y = "Total Deaths")



# Summarize total deaths for each disease by year
total_deaths_by_year <- deaths_data %>%
  group_by(year, cause) %>%
  summarize(total_deaths = sum(total_deaths))

# Plot for mortality data
ggplot(total_deaths_by_year, aes(x = as.factor(year), y = total_deaths, group = cause, color = cause)) +
  geom_line() +
  labs(title = "Total Deaths by Year for Each Disease",
       x = "Year",
       y = "Total Deaths")


# Ensure the 'year' column is in numeric format for proper line plotting
average_aqi_by_year$year <- as.numeric(as.character(average_aqi_by_year$year))

# Plotting with ggplot2
ggplot(average_aqi_by_year, aes(x = year, y = average_aqi)) +
  geom_line() +  # for lines
  geom_point() + # for points
  labs(title = "Average Air Quality Health Index by Year",
       x = "Year",
       y = "Average Air Quality Index") +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) # Optional: Adjust x-axis breaks

ggplot(average_aqi_by_year, aes(x = as.factor(year), y = average_aqi, fill = as.factor(year))) +
  geom_bar(stat = "identity") +
  labs(title = "Average Air Quality Health Index by Year",
       x = "Year",
       y = "Average AQHI") +
  theme_minimal()

```

Talk way more about it. 



# Model

The goal of our modelling strategy is twofold. Firstly,...

Here we briefly describe the Bayesian analysis model used to investigate... Background details and diagnostics are included in [Appendix -@sec-model-details].

## Model set-up

Define $y_i$ as the number of seconds that the plane remained aloft. Then $\beta_i$ is the wing width and $\gamma_i$ is the wing length, both measured in millimeters.  

\begin{align} 
y_i|\mu_i, \sigma &\sim \mbox{Normal}(\mu_i, \sigma) \\
\mu_i &= \alpha + \beta_i + \gamma_i\\
\alpha &\sim \mbox{Normal}(0, 2.5) \\
\beta &\sim \mbox{Normal}(0, 2.5) \\
\gamma &\sim \mbox{Normal}(0, 2.5) \\
\sigma &\sim \mbox{Exponential}(1)
\end{align}

We run the model in R [@citeR] using the `rstanarm` package of @rstanarm. We use the default priors from `rstanarm`.


### Model justification

We expect a positive relationship between the size of the wings and time spent aloft. In particular...

We can use maths by including latex between dollar signs, for instance $\theta$.


# Results

Our results are summarized in @tbl-modelresults.

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false

library(rstanarm)
library(here)
library(ggplot2)
library(modelsummary)

# Assuming you've already read your models as before
neg_binom_model <- readRDS(file = here::here("models/neg_binom_model.rds"))
stan_neg_binom_model <- readRDS(file = here::here("models/stan_neg_binom_model.rds"))
stan_poisson_model <-readRDS(file = here::here("models/stan_poisson_model.rds"))

heart_model <- readRDS(file = here::here("models/heart_model.rds"))
lung_model <-readRDS(file = here::here("models/lung_model.rds"))


first_model <-
  readRDS(file = here::here("models/first_model.rds"))

poisson_model <-
  readRDS(file = here::here("models/poisson_model.rds"))

```

```{r}
#| echo: false
#| eval: true
#| label: tbl-modelresults
#| tbl-cap: "Model of "
#| warning: false
library(modelsummary)

modelsummary::modelsummary(
  list(
    "heart causes model" = heart_model
  ),
  #statistic = "mad",
  fmt = 2
)

modelsummary::modelsummary(
  list(
    "Lung Causes model" = lung_model
  ),
  #statistic = "mad",
  fmt = 2
)



if (!requireNamespace("modelsummary", quietly = TRUE)) {
  install.packages("modelsummary")
}
library(modelsummary)

if (!requireNamespace("broom.mixed", quietly = TRUE)) {
  install.packages("broom.mixed")
}

library(broom.mixed)

coef_short_names <- 
  c("causeAll other forms of chronic ischemic heart disease" = "Ischemic Heart Disease",
    "causeMalignant neoplasms of trachea, bronchus and lung" = "Trachea/Bronchus/Lung Cancer",
    "causeOrganic dementia" = "Organic Dementia",
    "causeOther chronic obstructive pulmonary disease" = "COPD"
  )

# Summarize the models
modelsummary(
  list(
    "Poisson" = poisson_model,
    "Negative binomial" = first_model
  ),
  coef_map = coef_short_names,
  estimate_function = function(model) {
    broom.mixed::tidy(model, parameters = "all", conf.int = TRUE)
  }
)

```
# Discussion

## First discussion point {#sec-first-point}

If my paper were 10 pages, then should be be at least 2.5 pages. The discussion is a chance to show off what you know and what you learnt from all this. 

## Second discussion point

## Third discussion point

## Weaknesses and next steps

Weaknesses and next steps should also be included.

\newpage

\appendix

# Appendix {-}


# Additional data details

# Model details {#sec-model-details}

## Posterior predictive check

In @fig-ppcheckandposteriorvsprior-1 we implement a posterior predictive check. This shows...

In @fig-ppcheckandposteriorvsprior-2 we compare the posterior with the prior. This shows... 

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| label: fig-ppcheckandposteriorvsprior
#| layout-ncol: 2
#| fig-cap: "Examining how the model fits, and is affected by, the data"
#| fig-subcap: ["Posterior prediction check", "Comparing the posterior with the prior"]

pp_check(first_model) +
  theme(legend.position = "bottom")

pp_check(poisson_model) +
  theme(legend.position = "bottom")

pp_stan_neg_binom_model <- pp_check(stan_neg_binom_model)
pp_stan_neg_binom_model + theme(legend.position = "bottom")


pp_stan_poisson_model <- pp_check(stan_poisson_model)
pp_stan_poisson_model + theme(legend.position = "bottom")


pp_check(heart_model) +
  theme(legend.position = "bottom")

pp_check(lung_model) +
  theme(legend.position = "bottom")

```

## Diagnostics

@fig-stanareyouokay-1 is a trace plot. It shows... This suggests...

@fig-stanareyouokay-2 is a Rhat plot. It shows... This suggests...

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| label: fig-stanareyouokay
#| fig-cap: "Checking the convergence of the MCMC algorithm"
#| fig-subcap: ["Trace plot", "Rhat plot"]
#| layout-ncol: 2

plot(first_model, "trace")

plot(first_model, "rhat")

plot(stan_neg_binom_model, "trace")

plot(stan_neg_binom_model, "rhat")
```



\newpage


# References


